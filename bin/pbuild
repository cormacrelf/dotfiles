#!/usr/bin/env fish
set DOTFILES "$HOME/.dotfiles"

set pbuild (basename (status -f))

function verbose_echo
  if set -q VERBOSE
    echo $argv > /dev/stderr
  end
end

function sub_help
    echo "Usage: $pbuild <subcommand> <file.md>"
    echo "Subcommands:"
    # sub_short
    echo "    short   Build a plain document with small headers."
    echo "            -a | --append-bibliography => includes a bibliography at the end"
    # sub_none
    echo "    none    No output type specified. Pass -- -t json or native for raw pandoc"
    echo "            syntax output. Useful for debugging lua filters"
    # sub_count
    echo "    count   Word count without generated footnotes from pandoc-citeproc."
    # sub_tex
    echo "    tex     Same as short, but only output generated latex."
    # sub_word
    echo "    word    Build a Word document."
    echo "            -r | --reference-doc => change styles"
    echo "            bootstrap styles:"
    echo "                create a feature-rich filler template.md"
    echo "                \$ pbuild word template.md"
    echo "                edit the styles in that document"
    echo "                \$ pbuild word real-doc.md -r template.docx"
    echo
    echo "filters:"
    echo "    if there is a file called .pbuild-filters in the PWD where you run $pbuild,"
    echo "    then each line will be appended to the command as --lua-filter=\$line"
    echo "    in the order that they are written"

end

###############################
########## Constants ##########
###############################

set -g PRINT_CMD 0
set -g OPEN 0
set -g NOEXEC 0
set -g OVERRIDE_OUTPUT
# --lua-filters=XXX from .pbuild-filters
set -g BEFORE_FILTERS
set -g AFTER_FILTERS

# Location of Pandoc support files.
set PREFIX "$HOME/.pandoc"

# Location of your working bibliography file
set BIB "--filter=pandoc-citeproc --metadata bibliography=$HOME/lib/zotero-library.json"

# CSL stylesheet (located in the csl folder of the PREFIX directory).
set CSL ""
set AGLC "$HOME/Zotero/styles/australian-guide-to-legal-citation.csl"
set AGLC "$HOME/git/aglc4/src/aglc4.csl"
test -s "$AGLC"; and set CSL "--csl $AGLC"
set SUPPRESS_BIB "--metadata suppress-bibliography=true"

# Latex engine
set ENGINE "tectonic"

# Latex Template
set TEMPLATE "default.latex"

# For word docs
set REFERENCE_DOC "--reference-doc $DOTFILES/pandoc/yale-law-journal.docx" # default location is $PREFIX/reference.docx, override with pbuild --reference-docx <loc>

# Markdown Extensions
set EXTENSIONS "+smart+citations+simple_tables+multiline_tables+pipe_tables+table_captions+yaml_metadata_block+fenced_code_blocks+fancy_lists+startnum+example_lists+line_blocks+footnotes+inline_notes+inline_code_attributes+superscript+subscript+tex_math_dollars+raw_tex+fenced_divs" 
# Short doc arguments. Override with env variables.
# (note that `: ${var=value}` sets var iff not already set.)

###############################
########## Commands ###########
###############################

# args -> produce $argv = files, $PANDOC_ARGV = rest {{{
set -g pbuild_argv
set -g PANDOC_ARGV

# split on --
set -g counter 1
for arg in $argv
  set counter (math $counter + 1)
  if test "$arg" != "--"
    set pbuild_argv $pbuild_argv "$arg"
  else
    set PANDOC_ARGV $argv[$counter..-1]
    break
  end
end

# GLOBAL args
set -g SUBCOMMAND 'short'

set flags
set flags $flags 't/type=' 'h/help' 'q/open-only' 'O/open' 'o/output=' 'p-print-cmd' 'V/verbose'
set flags $flags 'c/csl=' 'b/bib=' 'v/variable=+'
set flags $flags 'r/reference-doc=' 'a-append-bibliography'
set flags $flags 'f-no-filters'
set flags $flags 'e/engine='
set flags $flags 'y-count-footnotes'
set -l argv
argparse "--name=$pbuild" "--min-args=1" $flags -- $pbuild_argv
if test $status -ne 0
  echo
  sub_help
  exit
end
set -g REST $argv[1..-1]

# flags handling {{{

if set -q _flag_engine
  if test "$_flag_engine" != "none"
    set BIB "--filter $_flag_engine"
  else 
    set BIB ""
  end
  set SUPPRESS_BIB ""
  set CSL ""
end
if set -q _flag_type
  set -g SUBCOMMAND $_flag_type
end
if set -q _flag_help;
  sub_help
  exit 0;
end
if set -q _flag_open
  set OPEN 1
end
if set -q _flag_open_only
  set OPEN 1
  set NOEXEC 1
end
if set -q _flag_output
  set OVERRIDE_OUTPUT "$_flag_output"
end
if set -q _flag_print_cmd
  set PRINT_CMD 1
end
if set -q _flag_verbose
  set VERBOSE 1
end
if set -q _flag_csl
  set CSL "--csl $_flag_csl"
end
if set -q _flag_bib
  set BIB "--filter=pandoc-citeproc --metadata bibliography=$_flag_bib"
end
if set -q _flag_reference_doc
  set REFERENCE_DOC "--reference-doc '$_flag_r'"
end
if set -q _flag_append_bibliography;
  set SUPPRESS_BIB "--metadata suppress-bibliography=false"
end
# }}}
# -v variable:value {{{

set -g var_names
set -g var_values

function add_var
  set var_names $var_names $argv[1]
  set var_values $var_values $argv[2]
end

function set_var
  if set -l index (contains -i -- $argv[1] $var_names)
    set var_values[$index] $argv[2]
  else
    add_var $argv
  end
end

function get_var
  set -l key $argv[1]
  if set -l index (contains -i -- $key $var_names)
    echo "--variable=\"$key:$var_values[$index]\""
  end
end

add_var geometry 'a4paper,top=3cm,bottom=3cm,left=3cm,right=3cm'
add_var papersize 'a4'
# add_var mainfont 'EB Garamond'
add_var mainfont 'Baskerville'
# add_var sansfont 'Helvetica'
add_var sansfont 'Open Sans'
add_var monofont 'Fira Code'
add_var fontsize '12pt'
# add_var linespace '1.24' # ~1.4 spaced (1.6 = double)
add_var linespace '1.5'
add_var parindent '0pt'
add_var parskip '10pt'
add_var subparagraph yes
add_var documentclass 'scrartcl'
add_var linkcolor '[HTML]{da547b}'
add_var citecolor '[HTML]{333333}'
add_var urlcolor '[HTML]{4d98ff}'

function get_yml_vars
  if test -s ./pbuild.yml
    yq -r ".variables|to_entries|map(.key + \":\" + .value)|map(tostring)[]" ./pbuild.yml
  end
end

set -g variables
set variables $variables (get_yml_vars)
# override with command line
set variables $variables $_flag_variable
verbose_echo "variables:"
verbose_echo "  $variables"

for var in $variables
  set_var (string split ':' $var)
end

function all_args
  for var in $var_names
    echo (get_var $var)
  end
end

function make_shortargs
  echo "--pdf-engine=$ENGINE --template=default" (all_args) "--highlight-style=haddock"
end
# }}}

# FILTERS {{{

function read_filters
  set -l filters (yq ".$argv[1][]" pbuild.yml)
  set -l arr
  for filter in $filters
    eval "test -s $filter"
    set -l stat (if test $status -eq 0; echo ' [file exists]'; end)
    verbose_echo '- filter: '$filter$stat
    set arr $arr "--lua-filter=$filter"
  end
  echo $arr
end

if not set -q _flag_no_filters; and test -s pbuild.yml
  verbose_echo "before_filters:"
  set -g BEFORE_FILTERS $BEFORE_FILTERS (read_filters before_citeproc)
  verbose_echo "after_filters:"
  set -g AFTER_FILTERS $AFTER_FILTERS (read_filters after_citeproc)
  verbose_echo ""
end

# }}}


# CONFIGURATION -- i.e. cli params in yml {{{

function read_config_bool
  set -l from_yml (yq ".$argv[1]" pbuild.yml)
  if test "$from_yml" != "null"
    echo $from_yml
  end
end

function read_config_string
  set -l from_yml (yq -r ".$argv[1]" pbuild.yml)
  if test "$from_yml" != "null"
    echo $from_yml
  end
end

if test -s pbuild.yml
  set -l append_bib (read_config_bool append_bibliography)
  if test "$append_bib" = "true"
    set SUPPRESS_BIB "--metadata suppress-bibliography=false"
  end
  if test "$append_bib" = "false"
    set SUPPRESS_BIB "--metadata suppress-bibliography=true"
  end

  set -l bibliography (read_config_string bibliography)
  if test -n "$bibliography"
    set BIB "--filter=pandoc-citeproc --metadata bibliography=$bibliography"
  end

  set -l reference_doc (read_config_string reference_doc)
  if test -n "$reference_doc"
    set REFERENCE_DOC "--reference-doc $reference_doc"
  end

  set -l count_footnotes (read_config_bool count_footnotes)
  if test "$count_footnotes" = "true"
    set -g _flag_count_footnotes "something"
  end
end

# }}}

# }}}

# subcommands {{{

function print_or_execute
  if test $NOEXEC -eq 0
    if test $PRINT_CMD -eq 1
      echo $argv
      return 0
    else
      echo $argv | bash
      return $status
    end
  end
  return 0
end

set -g INPUT
set -g OUTPUT
set -g PANDOC_COMMON "pandoc -s $BEFORE_FILTERS $BIB $AFTER_FILTERS $CSL $SUPPRESS_BIB -r markdown$EXTENSIONS --strip-comments"

function pb_common
  set -l cmd "$PANDOC_COMMON $argv $INPUT $PANDOC_ARGV"
  print_or_execute $cmd
  set printor $status
  if test $printor -eq 0; and test $OPEN -eq 1
    open $OUTPUT
  end
  return $printor
end

function sub_none
  set -l out
  if test -n "$OVERRIDE_OUTPUT"
    set OUTPUT $OVERRIDE_OUTPUT
    set out "-o $OVERRIDE_OUTPUT"
  end
  set -l cmd "$out"
  pb_common $cmd
  return $status
end

function sub_count
  set -l WC "--lua-filter=$DOTFILES/pandoc/filters/wordcount.lua"
  if set -q _flag_count_footnotes
    set WC "--lua-filter=$DOTFILES/pandoc/filters/wordcount_all.lua"
  end
  set -l cmd "$PANDOC_COMMON $WC $INPUT $PANDOC_ARGV"
  echo $cmd | bash 2>/dev/null
  return $status
end

function sub_short
  set -g OUTPUT (change_ext "$INPUT" pdf)
  pb_common (make_shortargs) "-o $OUTPUT"
  return $status
end

function sub_html
  set -g OUTPUT (change_ext "$INPUT" html)
  pb_common "--metadata title=\"Preview for $INPUT\" -o $OUTPUT"
  return $status
end

function sub_word
  set -g OUTPUT (change_ext "$INPUT" docx)
  pb_common "$REFERENCE_DOC -o $OUTPUT"
  return $status
end

function sub_tex
  set -g OUTPUT (change_ext "$INPUT" tex)
  set -l args 
  pb_common (make_shortargs)" -t latex -o $OUTPUT"
  return $status
end

function change_ext
  if test -n "$OVERRIDE_OUTPUT"
    echo "$OVERRIDE_OUTPUT"
  else
    echo (echo $argv[1] | cut -f 1 -d .)".$argv[2]"
  end
end

function foreach_file
  set -l error 0
  if test (count $REST) -gt 1
    echo "does not support more than one file at once"
    exit 1
  end
  for file in $REST
    set INPUT "$file"
    eval "sub_$SUBCOMMAND $file"
    set ret $status
    if test $ret -ne 0
      return $ret
    end
    break
  end
end

foreach_file

if test $status -eq 127
  echo "Error: '$SUBCOMMAND' is not a known subcommand."# >&2
  echo "Run '$pbuild --help' for a list of known subcommands."# >&2
  exit 1
end

exit $status
