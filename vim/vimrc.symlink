set noswapfile
set nocompatible

set shell=/bin/zsh
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect() " do this first so we can load colorschemes, etc.

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

syntax on				  " pretty obvious there
set background=dark
colorscheme solarized

" change the default light/dark switch key
call togglebg#map("<F8>")

set autoindent             " automatic indent new lines
set smartindent            " be smart about it: actually, use filetype
inoremap # X<BS>#
nmap <leader>l :set list!<CR> " Shortcut to rapidly toggle `set list`
" set nowrap                 " do not wrap lines
set formatoptions=l
set lbr
set smarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
" set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..
set hlsearch

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
" inoremap jj <ESC>


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" use NERDTree on ,d

map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
map <silent> <C-s> :NERDTree<CR><C-w>p:NERDTreeFind<CR>

" Increment & decrement
nnoremap + <C-a>
nnoremap - <C-x>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
" set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
" set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling
set scrolloff=3            " scroll early, give us a bit of context

set splitright splitbelow  " when :[v]split-ting, go to the right/down

" autocmd vimenter * if !argc() | NERDTree | endif
" if no arguments passed to VIM, open up NERDTree.

" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set nohlsearch             " don't highlight searches
set visualbell             " shut the fuck up
set title
set hidden

" ---------------------------------------------------------------------------
" Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
exec ':%s/ \+$//gc'
endfunction
map <leader>s :call StripWhitespace ()<CR>

" ---------------------------------------------------------------------------
" Filetypes
" ---------------------------------------------------------------------------

filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins

autocmd FileType objc setlocal shiftwidth=4 tabstop=4

compiler ruby         " Enable compiler support for ruby

runtime macros/matchit.vim

autocmd FileType ruby call smartinput#map_to_trigger('i', '#', '#', '#')
autocmd FIleType ruby call smartinput#define_rule({
    \   'at': '\%#',
    \   'char': '#',
    \   'input': '#{}<Left>',
    \   'filetype': ['ruby'],
    \   'syntax': ['Constant', 'Special'],
    \ })

" ---------------------------------------------------------------------------
" Plugin Configuration
" ---------------------------------------------------------------------------

let g:slime_target = "tmux"
let g:neocomplcache_enable_at_startup = 1

" ---------------------------------------------------------------------------
" Vimbits
" ---------------------------------------------------------------------------

" Easy split navigation
noremap <C-h> <C-w>h 
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Find merge conflict markers
nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" Insert one character
" nnoremap <C-i> :exec "normal i".nr2char(getchar())."\e"<CR>
" nnoremap <C-i>a :exec "normal a".nr2char(getchar())."\e"<CR>

" Better command-line editing (:O emacs mode!)
cnoremap <C-j> <t_kd>
cnoremap <C-k> <t_ku>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" select all
map <Leader>a ggVG

" automatically reload vimrc when it's saved
au BufWritePost .vimrc so ~/.vimrc


" ---------------------------------------------------------------------------
" ConqueTerm
" ---------------------------------------------------------------------------

" Run the current file in a ConqueTerm, great for ruby tests
let g:ConqueTerm_InsertOnEnter = 0
let g:ConqueTerm_CWInsert = 1
nmap <silent> <Leader>r :call RunRubyCurrentFileConque()<CR>
nmap <silent> <Leader>r :w !ruby<CR>
nmap <silent> <Leader>R :call RunRakeConque()<CR>
nmap <silent> <Leader>c :execute 'ConqueTermSplit script/console'<CR>
nmap <silent> <Leader>i :execute 'ConqueTermSplit pry'<CR>
nmap <silent> <Leader>b :execute 'ConqueTermSplit /bin/bash --login'<CR>
nmap <silent> <Leader>S :call RunRspecCurrentFileConque()<CR>

" Run the current file as a ruby file, great for running unit tests
function! RunRubyCurrentFileConque()
  execute "ConqueTermSplit ruby" bufname('%')
endfunction

function! RunRspecCurrentFileConque()
  execute "ConqueTermSplit rspec" bufname('%') " --color --format doc"
endfunction

function! RunRakeConque()
  execute "ConqueTermSplit rake"
endfunction

" Send the current selection to conqueterm. This lets you easily veal
" Ruby code in an irb console. Note: you must have only one ConqueTerm
" console open and running irb for this to work. Somehow it gets confused
" when multiple consoles are open. If you know how to fix this let me know :)
let g:ConqueTerm_SendVisKey = '<Leader>e'



" ---------------------------------------------------------------------------
" Indentation
" ---------------------------------------------------------------------------

autocmd Filetype html setlocal ts=2 sw=2 expandtab
autocmd Filetype ruby setlocal ts=2 sw=2 expandtab
autocmd Filetype javascript setlocal ts=4 sw=4 sts=0 noexpandtab
autocmd Filetype coffee setlocal ts=2 sw=2 expandtab
autocmd Filetype haskell setlocal ts=8 sw=8 noexpandtab
